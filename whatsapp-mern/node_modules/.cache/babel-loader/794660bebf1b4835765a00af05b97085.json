{"ast":null,"code":"var Token = require('./token');\n\nvar isBase64 = require('is-base64');\n\nfunction Config(options) {\n  options = options || {};\n  var useTLS = false;\n\n  if (options.useTLS !== undefined && options.encrypted !== undefined) {\n    throw new Error(\"Cannot set both `useTLS` and `encrypted` configuration options\");\n  } else if (options.useTLS !== undefined) {\n    useTLS = options.useTLS;\n  } else if (options.encrypted !== undefined) {\n    // `encrypted` deprecated in favor of `useTLS`\n    console.warn(\"`encrypted` option is deprecated in favor of `useTLS`\");\n    useTLS = options.encrypted;\n  }\n\n  this.scheme = options.scheme || (useTLS ? \"https\" : \"http\");\n  this.port = options.port;\n  this.appId = options.appId;\n  this.token = new Token(options.key, options.secret);\n  this.proxy = options.proxy;\n  this.timeout = options.timeout;\n  this.keepAlive = options.keepAlive; // Handle deprecated raw 32 byte string as key\n\n  if (options.encryptionMasterKey !== undefined) {\n    if (options.encryptionMasterKeyBase64 !== undefined) {\n      throw new Error(\"Do not specify both encryptionMasterKey and encryptionMasterKeyBase64. \" + \"encryptionMasterKey is deprecated, please specify only encryptionMasterKeyBase64.\");\n    }\n\n    console.warn(\"`encryptionMasterKey` option is deprecated in favor of `encryptionMasterKeyBase64`\");\n\n    if (typeof options.encryptionMasterKey !== 'string') {\n      throw new Error(\"encryptionMasterKey must be a string\");\n    }\n\n    if (options.encryptionMasterKey.length !== 32) {\n      throw new Error(\"encryptionMasterKey must be 32 bytes long, but the string '\" + options.encryptionMasterKey + \"' is \" + options.encryptionMasterKey.length + \" bytes long\");\n    }\n\n    this.encryptionMasterKey = options.encryptionMasterKey;\n  } // Handle base64 encoded 32 byte key to encourage use of the full range of byte values\n\n\n  if (options.encryptionMasterKeyBase64 !== undefined) {\n    if (typeof options.encryptionMasterKeyBase64 !== 'string') {\n      throw new Error(\"encryptionMasterKeyBase64 must be a string\");\n    }\n\n    if (!isBase64(options.encryptionMasterKeyBase64)) {\n      throw new Error(\"encryptionMasterKeyBase64 must be valid base64\");\n    }\n\n    var decodedKey = Buffer.from(options.encryptionMasterKeyBase64, \"base64\").toString(\"binary\");\n\n    if (decodedKey.length !== 32) {\n      throw new Error(\"encryptionMasterKeyBase64 must decode to 32 bytes, but the string \" + options.encryptionMasterKeyBase64 + \"' decodes to \" + decodedKey.length + \" bytes\");\n    }\n\n    this.encryptionMasterKey = decodedKey;\n  }\n}\n\nConfig.prototype.prefixPath = function (subPath) {\n  throw \"NotImplementedError: #prefixPath should be implemented by subclasses\";\n};\n\nConfig.prototype.getBaseURL = function (subPath, queryString) {\n  var port = this.port ? ':' + this.port : '';\n  return this.scheme + '://' + this.host + port;\n};\n\nmodule.exports = Config;","map":{"version":3,"sources":["C:/Users/Terre/Projects/WhatsApp/whatsapp-mern/node_modules/pusher/lib/config.js"],"names":["Token","require","isBase64","Config","options","useTLS","undefined","encrypted","Error","console","warn","scheme","port","appId","token","key","secret","proxy","timeout","keepAlive","encryptionMasterKey","encryptionMasterKeyBase64","length","decodedKey","Buffer","from","toString","prototype","prefixPath","subPath","getBaseURL","queryString","host","module","exports"],"mappings":"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","sourcesContent":["var Token = require('./token');\nvar isBase64 = require('is-base64')\n\nfunction Config(options) {\n  options = options || {};\n\n  var useTLS = false;\n  if (options.useTLS !== undefined && options.encrypted !== undefined) {\n    throw new Error(\"Cannot set both `useTLS` and `encrypted` configuration options\");\n  } else if (options.useTLS !== undefined) {\n    useTLS = options.useTLS;\n  } else if (options.encrypted !== undefined) {\n    // `encrypted` deprecated in favor of `useTLS`\n    console.warn(\"`encrypted` option is deprecated in favor of `useTLS`\");\n    useTLS = options.encrypted;\n  }\n  this.scheme = options.scheme || (useTLS ? \"https\" : \"http\");\n  this.port = options.port;\n\n  this.appId = options.appId;\n  this.token = new Token(options.key, options.secret);\n\n  this.proxy = options.proxy;\n  this.timeout = options.timeout;\n  this.keepAlive = options.keepAlive;\n\n  // Handle deprecated raw 32 byte string as key\n  if (options.encryptionMasterKey !== undefined) {\n    if (options.encryptionMasterKeyBase64 !== undefined) {\n      throw new Error(\"Do not specify both encryptionMasterKey and encryptionMasterKeyBase64. \" +\n        \"encryptionMasterKey is deprecated, please specify only encryptionMasterKeyBase64.\");\n    }\n    console.warn(\"`encryptionMasterKey` option is deprecated in favor of `encryptionMasterKeyBase64`\");\n    if (typeof(options.encryptionMasterKey) !== 'string') {\n      throw new Error(\"encryptionMasterKey must be a string\");\n    }\n    if (options.encryptionMasterKey.length !== 32) {\n      throw new Error(\"encryptionMasterKey must be 32 bytes long, but the string '\" +\n        options.encryptionMasterKey + \"' is \" + options.encryptionMasterKey.length + \" bytes long\");\n    }\n\n    this.encryptionMasterKey = options.encryptionMasterKey;\n  }\n\n  // Handle base64 encoded 32 byte key to encourage use of the full range of byte values\n  if (options.encryptionMasterKeyBase64 !== undefined) {\n    if (typeof(options.encryptionMasterKeyBase64) !== 'string') {\n      throw new Error(\"encryptionMasterKeyBase64 must be a string\");\n    }\n    if (!isBase64(options.encryptionMasterKeyBase64)) {\n      throw new Error(\"encryptionMasterKeyBase64 must be valid base64\");\n    }\n\n    var decodedKey = Buffer.from(options.encryptionMasterKeyBase64, \"base64\").toString(\"binary\");\n    if (decodedKey.length !== 32) {\n      throw new Error(\"encryptionMasterKeyBase64 must decode to 32 bytes, but the string \" +\n        options.encryptionMasterKeyBase64 + \"' decodes to \" + decodedKey.length + \" bytes\");\n    }\n\n    this.encryptionMasterKey = decodedKey;\n  }\n}\n\nConfig.prototype.prefixPath = function(subPath) {\n  throw(\"NotImplementedError: #prefixPath should be implemented by subclasses\");\n};\n\nConfig.prototype.getBaseURL = function(subPath, queryString) {\n  var port = this.port ? (':' + this.port) : '';\n  return this.scheme + '://' + this.host + port;\n};\n\nmodule.exports = Config;\n"]},"metadata":{},"sourceType":"script"}