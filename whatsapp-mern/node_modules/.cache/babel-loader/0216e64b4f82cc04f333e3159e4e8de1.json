{"ast":null,"code":"var crypto = require('crypto');\n\nvar Buffer = Buffer || require('buffer').Buffer;\n\nvar util = require('./util');\n/** Verifies and signs data against the key and secret.\n *\n * @constructor\n * @param {String} key app key\n * @param {String} secret app secret\n */\n\n\nfunction Token(key, secret) {\n  this.key = key;\n  this.secret = secret;\n}\n/** Signs the string using the secret.\n *\n * @param {String} string\n * @returns {String}\n */\n\n\nToken.prototype.sign = function (string) {\n  return crypto.createHmac('sha256', this.secret).update(new Buffer(string, 'utf-8')).digest('hex');\n};\n/** Checks if the string has correct signature.\n *\n * @param {String} string\n * @param {String} signature\n * @returns {Boolean}\n */\n\n\nToken.prototype.verify = function (string, signature) {\n  return util.secureCompare(this.sign(string), signature);\n};\n\nmodule.exports = Token;","map":{"version":3,"sources":["C:/Users/Terre/Projects/WhatsApp/whatsapp-mern/node_modules/pusher/lib/token.js"],"names":["crypto","require","Buffer","util","Token","key","secret","prototype","sign","string","createHmac","update","digest","verify","signature","secureCompare","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,MAAM,GAAGA,MAAM,IAAID,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAzC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,QAAD,CAAlB;AAEA;;;;;;;;AAMA,SAASG,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4B;AAC1B,OAAKD,GAAL,GAAWA,GAAX;AACA,OAAKC,MAAL,GAAcA,MAAd;AACD;AAED;;;;;;;AAKAF,KAAK,CAACG,SAAN,CAAgBC,IAAhB,GAAuB,UAASC,MAAT,EAAiB;AACtC,SAAOT,MAAM,CAACU,UAAP,CAAkB,QAAlB,EAA4B,KAAKJ,MAAjC,EACJK,MADI,CACG,IAAIT,MAAJ,CAAWO,MAAX,EAAmB,OAAnB,CADH,EAEJG,MAFI,CAEG,KAFH,CAAP;AAGD,CAJD;AAMA;;;;;;;;AAMAR,KAAK,CAACG,SAAN,CAAgBM,MAAhB,GAAyB,UAASJ,MAAT,EAAiBK,SAAjB,EAA4B;AACnD,SAAOX,IAAI,CAACY,aAAL,CAAmB,KAAKP,IAAL,CAAUC,MAAV,CAAnB,EAAsCK,SAAtC,CAAP;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBb,KAAjB","sourcesContent":["var crypto = require('crypto');\nvar Buffer = Buffer || require('buffer').Buffer;\nvar util = require('./util');\n\n/** Verifies and signs data against the key and secret.\n *\n * @constructor\n * @param {String} key app key\n * @param {String} secret app secret\n */\nfunction Token(key, secret) {\n  this.key = key;\n  this.secret = secret;\n}\n\n/** Signs the string using the secret.\n *\n * @param {String} string\n * @returns {String}\n */\nToken.prototype.sign = function(string) {\n  return crypto.createHmac('sha256', this.secret)\n    .update(new Buffer(string, 'utf-8'))\n    .digest('hex');\n};\n\n/** Checks if the string has correct signature.\n *\n * @param {String} string\n * @param {String} signature\n * @returns {Boolean}\n */\nToken.prototype.verify = function(string, signature) {\n  return util.secureCompare(this.sign(string), signature);\n};\n\nmodule.exports = Token;\n"]},"metadata":{},"sourceType":"script"}